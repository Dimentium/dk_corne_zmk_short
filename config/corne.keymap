/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <39 41>;
            layers = <0>;
        };

        we2escape {
            bindings = <&kp ESC>;
            key-positions = <2 3>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        io2escape {
            bindings = <&kp ESC>;
            key-positions = <8 9>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        xc2enter {
            bindings = <&kp ENTER>;
            key-positions = <26 27>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        freevmc {
            bindings = <&kp LC(LALT)>;
            key-positions = <36 38>;
            layers = <0>;
        };

        combotaurus {
            bindings = <&makrotaurus>;
            key-positions = <5 4>;
            timeout-ms = <20>;
            layers = <1>;
        };

        commadot2enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        dotslash2shiftenter {
            bindings = <&kp LS(ENTER)>;
            key-positions = <21 22>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        mcomma2ctrlenter {
            bindings = <&kp LC(ENTER)>;
            key-positions = <19 20>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        ui2tab {
            bindings = <&kp TAB>;
            key-positions = <7 8>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };
    };

    macros {
        makrotaurus: makrotaurus {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp A &kp U &kp R &kp U &kp S>;
        };
        l4: l4 {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 4>,
                <&macro_tap>,
                <&sl 4>,
                <&macro_release>,
                <&to 0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &none   &kp Q   &kp W                      &kp E   &kp R      &kp T              &kp Y   &kp U                 &kp I    &kp O      &kp P   &none
  &none   &kp A   &kp S                      &kp D   &kp F      &kp G              &kp H   &kp J                 &kp K    &kp L   &kp SEMI   &none
  &none   &kp Z   &kp X                      &kp C   &kp V      &kp B              &kp N   &kp M             &kp COMMA  &kp DOT  &kp SLASH   &none
                         &mt LEFT_SHIFT LC(LS(N1))     &l4  &kp SPACE          &kp SPACE   &mo 1  &mt RSHFT LC(LS(N2))
            >;
        };

        nav {
            bindings = <
  &none    &trans    &trans      &none       &none      &none          &kp PG_UP  &kp HOME         &kp END          &kp INS          &kp DEL   &none
  &none  &sk LALT  &sk LWIN  &sk LCTRL  &sk LSHIFT  &kp K_APP           &kp LEFT  &kp DOWN          &kp UP        &kp RIGHT    &kp BACKSPACE   &none
  &none  &sk RALT     &none      &none  &caps_word      &none          &kp PG_DN   &kp TAB  &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp PRINTSCREEN   &none
                                 &none       &none      &none              &none     &none           &none
            >;
        };

        ext {
            bindings = <
  &none    &kp F1     &kp F2     &kp F3     &kp F4   &kp F5            &kp F6     &kp F7           &kp F8   &kp F9        &kp F10   &none
  &none    &kp N1     &kp N2     &kp N3     &kp N4   &kp N5            &kp N6     &kp N7           &kp N8   &kp N9         &kp N0   &none
  &none  &sk RALT  &kp GRAVE  &kp MINUS  &kp EQUAL  &kp F11           &kp F12   &kp LBKT         &kp RBKT  &kp SQT  &kp BACKSLASH   &none
                                  &none      &none    &none          &kp RALT  &kp RSHFT  &kp RIGHT_SHIFT
            >;
        };

        NUM {
            bindings = <
 &trans    &trans    &trans     &trans      &trans  &trans          &kp N6     &kp N7     &kp N8   &kp N9     &kp N0   &none
 &trans  &sk LALT  &sk LWIN  &sk LCTRL   &sk LSHFT  &trans          &kp N5     &kp N1     &kp N2   &kp N3     &kp N4  &trans
 &trans  &sk RALT    &trans     &trans  &caps_word  &trans          &trans  &kp MINUS  &kp COMMA  &kp DOT  &kp EQUAL  &trans
                                 &to 0      &trans  &trans          &trans     &trans     &trans
            >;
        };

        ADD {
            bindings = <
 &trans    &trans    &trans     &trans  &key_repeat   &trans          &kp LS(BSLH)     &kp BSLH  &kp LA(BSLH)  &kp MINUS             &kp EQUAL  &trans
 &trans  &sk LALT  &sk LWIN  &sk LCTRL   &sk LSHIFT  &kp TAB             &kp GRAVE     &kp LBKT      &kp RBKT    &kp SQT         &kp LS(GRAVE)  &trans
 &trans  &sk RALT    &trans     &trans   &caps_word   &trans          &kp RA(SEMI)  &kp RA(SQT)     &kp COMMA    &kp DOT  &kp NON_US_BACKSLASH  &trans
                                 &to 0       &trans   &trans                &tog 5       &tog 3         &mo 2
            >;
        };

        FN {
            bindings = <
 &trans  &kp C_BRI_DN  &kp C_BRI_UP     &trans     &trans  &trans          &kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans
 &trans      &sk LALT      &sk LWIN  &sk LCTRL  &sk LSHFT  &trans          &kp F5   &kp F1   &kp F2  &kp F3   &kp F4  &trans
 &trans        &trans        &trans     &trans     &trans  &trans          &trans  &kp F11  &kp F12  &trans  &kp ESC  &trans
                                         &to 0     &trans  &trans          &trans   &trans   &trans
            >;
        };
    };
};
